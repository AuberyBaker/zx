import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.54ce79f7.js";const h=JSON.parse('{"title":"ProcessPromise","description":"","frontmatter":{},"headers":[],"relativePath":"process-promise.md","filePath":"process-promise.md"}'),l={name:"process-promise.md"},o=p('<h1 id="processpromise" tabindex="-1">ProcessPromise <a class="header-anchor" href="#processpromise" aria-label="Permalink to &quot;ProcessPromise&quot;">​</a></h1><p>The <code>$</code> returns a <code>ProcessPromise</code> instance.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`command`</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> p</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`command`</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> p</span></span></code></pre></div><h2 id="stdin" tabindex="-1"><code>stdin</code> <a class="header-anchor" href="#stdin" aria-label="Permalink to &quot;`stdin`&quot;">​</a></h2><p>Returns a writable stream of the stdin process. Accessing this getter will trigger execution of a subprocess with <a href="#stdio"><code>stdio(&#39;pipe&#39;)</code></a>.</p><p>Do not forget to end the stream.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`while read; do echo $REPLY; done`</span></span>\n<span class="line"><span style="color:#E1E4E8;">p.stdin.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello, World!</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">p.stdin.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`while read; do echo $REPLY; done`</span></span>\n<span class="line"><span style="color:#24292E;">p.stdin.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, World!</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">p.stdin.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">()</span></span></code></pre></div><p>By default, each process is created with stdin in <em>inherit</em> mode.</p><h2 id="stdout-stderr" tabindex="-1"><code>stdout</code>/<code>stderr</code> <a class="header-anchor" href="#stdout-stderr" aria-label="Permalink to &quot;`stdout`/`stderr`&quot;">​</a></h2><p>Returns a readable streams of stdout/stderr process.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`npm init`</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> p.stdout) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">(chunk)</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`npm init`</span></span>\n<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chunk</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> p.stdout) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">(chunk)</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="exitcode" tabindex="-1"><code>exitCode</code> <a class="header-anchor" href="#exitcode" aria-label="Permalink to &quot;`exitCode`&quot;">​</a></h2><p>Returns a promise which resolves to the exit code of the process.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`[[ -d path ]]`</span><span style="color:#E1E4E8;">.exitCode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`[[ -d path ]]`</span><span style="color:#24292E;">.exitCode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="pipe" tabindex="-1"><code>pipe()</code> <a class="header-anchor" href="#pipe" aria-label="Permalink to &quot;`pipe()`&quot;">​</a></h2><p>Redirects the stdout of the process.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`echo &quot;Hello, stdout!&quot;`</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(fs.</span><span style="color:#B392F0;">createWriteStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/tmp/output.txt&#39;</span><span style="color:#E1E4E8;">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`cat /tmp/output.txt`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`echo &quot;Hello, stdout!&quot;`</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(fs.</span><span style="color:#6F42C1;">createWriteStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/tmp/output.txt&#39;</span><span style="color:#24292E;">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`cat /tmp/output.txt`</span></span></code></pre></div><p>Pipes can be used to show a real-time output of the process:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`echo 1; sleep 1; echo 2; sleep 1; echo 3;`</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(process.stdout)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`echo 1; sleep 1; echo 2; sleep 1; echo 3;`</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(process.stdout)</span></span></code></pre></div><p>The <code>pipe()</code> method can combine <code>$</code> processes. Same as <code>|</code> in bash:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> greeting </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`printf &quot;hello&quot;`</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`awk &#39;{printf $1&quot;, world!&quot;}&#39;`</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`tr &#39;[a-z]&#39; &#39;[A-Z]&#39;`</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">(greeting)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> greeting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`printf &quot;hello&quot;`</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`awk &#39;{printf $1&quot;, world!&quot;}&#39;`</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`tr &#39;[a-z]&#39; &#39;[A-Z]&#39;`</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">(greeting)</span></span></code></pre></div><p>Use combinations of <code>pipe()</code> and <a href="#nothrow"><code>nothrow()</code></a>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`find ./examples -type f -print0`</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`xargs -0 grep ${&#39;missing&#39;</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;part&#39;}`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nothrow</span><span style="color:#E1E4E8;">())</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`wc -l`</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`find ./examples -type f -print0`</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`xargs -0 grep ${&#39;missing&#39;</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;part&#39;}`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">nothrow</span><span style="color:#24292E;">())</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`wc -l`</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="kill" tabindex="-1"><code>kill()</code> <a class="header-anchor" href="#kill" aria-label="Permalink to &quot;`kill()`&quot;">​</a></h2><p>Kills the process and all children.</p><p>By default, signal <code>SIGTERM</code> is sent. You can specify a signal via an argument.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`sleep 999`</span></span>\n<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">kill</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;SIGINT&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> p</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`sleep 999`</span></span>\n<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">kill</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;SIGINT&#39;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> p</span></span></code></pre></div><h2 id="stdio" tabindex="-1"><code>stdio()</code> <a class="header-anchor" href="#stdio" aria-label="Permalink to &quot;`stdio()`&quot;">​</a></h2><p>Specifies a stdio for the process.</p><p>Default is <code>.stdio(&#39;inherit&#39;, &#39;pipe&#39;, &#39;pipe&#39;)</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`read`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stdio</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;pipe&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`read`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stdio</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;pipe&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="nothrow" tabindex="-1"><code>nothrow()</code> <a class="header-anchor" href="#nothrow" aria-label="Permalink to &quot;`nothrow()`&quot;">​</a></h2><p>Changes behavior of <code>$</code> to not throw an exception on non-zero exit codes.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`grep something from-file`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nothrow</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// Inside a pipe():</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`find ./examples -type f -print0`</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`xargs -0 grep something`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nothrow</span><span style="color:#E1E4E8;">())</span></span>\n<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`wc -l`</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`grep something from-file`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">nothrow</span><span style="color:#24292E;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// Inside a pipe():</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`find ./examples -type f -print0`</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`xargs -0 grep something`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">nothrow</span><span style="color:#24292E;">())</span></span>\n<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`wc -l`</span><span style="color:#24292E;">)</span></span></code></pre></div><p>If only the <code>exitCode</code> is needed, you can use <a href="#exitcode"><code>exitCode</code></a> directly:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`[[ -d path ]]`</span><span style="color:#E1E4E8;">.exitCode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// Equivalent of:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`[[ -d path ]]`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nothrow</span><span style="color:#E1E4E8;">()).exitCode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`[[ -d path ]]`</span><span style="color:#24292E;">.exitCode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// Equivalent of:</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`[[ -d path ]]`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">nothrow</span><span style="color:#24292E;">()).exitCode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>\n<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="quiet" tabindex="-1"><code>quiet()</code> <a class="header-anchor" href="#quiet" aria-label="Permalink to &quot;`quiet()`&quot;">​</a></h2><p>Changes behavior of <code>$</code> to disable verbose output.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Command and output will not be displayed.</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`grep something from-file`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">quiet</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Command and output will not be displayed.</span></span>\n<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`grep something from-file`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">quiet</span><span style="color:#24292E;">()</span></span></code></pre></div><h2 id="timeout" tabindex="-1"><code>timeout()</code> <a class="header-anchor" href="#timeout" aria-label="Permalink to &quot;`timeout()`&quot;">​</a></h2><p>Kills the process after a specified timeout.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`sleep 999`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">timeout</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;5s&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// Or with a specific signal.</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`sleep 999`</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">timeout</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;5s&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;SIGKILL&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`sleep 999`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">timeout</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;5s&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// Or with a specific signal.</span></span>\n<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`sleep 999`</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">timeout</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;5s&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;SIGKILL&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div>',42),e=[o];function t(c,r,i,y,E,d){return a(),n("div",null,e)}const u=s(l,[["render",t]]);export{h as __pageData,u as default};
