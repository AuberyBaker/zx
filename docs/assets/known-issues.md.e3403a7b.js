import{_ as s,o as a,c as e,Q as o}from"./chunks/framework.54ce79f7.js";const E=JSON.parse('{"title":"Known Issues","description":"","frontmatter":{},"headers":[],"relativePath":"known-issues.md","filePath":"known-issues.md"}'),n={name:"known-issues.md"},t=o('<h1 id="known-issues" tabindex="-1">Known Issues <a class="header-anchor" href="#known-issues" aria-label="Permalink to &quot;Known Issues&quot;">​</a></h1><h2 id="output-gets-truncated" tabindex="-1">Output gets truncated <a class="header-anchor" href="#output-gets-truncated" aria-label="Permalink to &quot;Output gets truncated&quot;">​</a></h2><p>This is a known issue with <code>console.log()</code> (see <a href="https://github.com/nodejs/node/issues/6379" target="_blank" rel="noreferrer">nodejs/node#6379</a>). It&#39;s caused by different behaviour of <code>console.log()</code> writing to the terminal vs to a file. If a process calls <code>process.exit()</code>, buffered output will be truncated. To prevent this, the process should use <code>process.exitCode = 1</code> and wait for the process to exit itself. Or use something like <a href="https://www.npmjs.com/package/exit" target="_blank" rel="noreferrer">exit</a> package.</p><p>Workaround is to write to a temp file:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`mktemp`</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Creates a temp file.</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> {stdout} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`cmd &gt; ${</span><span style="color:#E1E4E8;">tmp</span><span style="color:#9ECBFF;">}; cat ${</span><span style="color:#E1E4E8;">tmp</span><span style="color:#9ECBFF;">}`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`mktemp`</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Creates a temp file.</span></span>\n<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {stdout} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`cmd &gt; ${</span><span style="color:#24292E;">tmp</span><span style="color:#032F62;">}; cat ${</span><span style="color:#24292E;">tmp</span><span style="color:#032F62;">}`</span></span></code></pre></div><h2 id="colors-in-subprocess" tabindex="-1">Colors in subprocess <a class="header-anchor" href="#colors-in-subprocess" aria-label="Permalink to &quot;Colors in subprocess&quot;">​</a></h2><p>You may see what tools invoked with <code>await $</code> don&#39;t show colors, compared to what you see in a terminal. This is because, the subprocess does not think it&#39;s a TTY and the subprocess turns off colors. Usually there is a way force the subprocess to add colors.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">p<wbr>rocess.env.</span><span style="color:#79B8FF;">FORCE_COLOR</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;1&#39;</span></span>\n<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">`cmd`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">p<wbr>rocess.env.</span><span style="color:#005CC5;">FORCE_COLOR</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;1&#39;</span></span>\n<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">`cmd`</span></span></code></pre></div>',8),p=[t];function l(c,r,i,d,u,y){return a(),e("div",null,p)}const m=s(n,[["render",l]]);export{E as __pageData,m as default};
