import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.54ce79f7.js";const F=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"getting-started.md","filePath":"getting-started.md"}'),p={name:"getting-started.md"},o=l(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zx</span></span></code></pre></div><p><strong>Requirement</strong>: Node version &gt;= 16.0.0</p><h2 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h2><p><a href="https://webpod.dev/?from=zx"><img src="https://webpod.dev/img/banner.png" alt="Webpod - deploy JavaScript apps" width="190" align="right"></a></p><p>Write your scripts in a file with an <code>.mjs</code> extension in order to use <code>await</code> at the top level. If you prefer the <code>.js</code> extension, wrap your scripts in something like <code>void async function () {...}()</code>.</p><p>Add the following shebang to the beginning of your <code>zx</code> scripts:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/env zx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/env zx</span></span></code></pre></div><p>Now you will be able to run your script like so:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">chmod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./script.mjs</span></span>
<span class="line"><span style="color:#B392F0;">./script.mjs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">chmod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./script.mjs</span></span>
<span class="line"><span style="color:#6F42C1;">./script.mjs</span></span></code></pre></div><p>Or via the <code>zx</code> executable:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">zx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./script.mjs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">zx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./script.mjs</span></span></code></pre></div><p>All functions (<code>$</code>, <code>cd</code>, <code>fetch</code>, etc) are available straight away without any imports.</p><p>Or import globals explicitly (for better autocomplete in VS Code).</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;zx/globals&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;zx/globals&#39;</span></span></code></pre></div><h3 id="command" tabindex="-1"><code>$\`command\` </code> <a class="header-anchor" href="#command" aria-label="Permalink to &quot;\`\`$\`command\` \`\`&quot;">​</a></h3><p>Executes a given command using the <code>spawn</code> func and returns <a href="#processpromise"><code>ProcessPromise</code></a>.</p><p>Everything passed through <code>\${...}</code> will be automatically escaped and quoted.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;foo &amp; bar&#39;</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`mkdir \${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;foo &amp; bar&#39;</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`mkdir \${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}\`</span></span></code></pre></div><p><strong>There is no need to add extra quotes.</strong> Read more about it in <a href="./quotes">quotes</a>.</p><p>You can pass an array of arguments if needed:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> flags </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;--oneline&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;--decorate&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;--color&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`git log \${</span><span style="color:#E1E4E8;">flags</span><span style="color:#9ECBFF;">}\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> flags </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;--oneline&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;--decorate&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;--color&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`git log \${</span><span style="color:#24292E;">flags</span><span style="color:#032F62;">}\`</span></span></code></pre></div><p>If the executed program returns a non-zero exit code, <a href="#processoutput"><code>ProcessOutput</code></a> will be thrown.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`exit 1\`</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (p) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Exit code: \${</span><span style="color:#E1E4E8;">p</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">exitCode</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Error: \${</span><span style="color:#E1E4E8;">p</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">stderr</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`exit 1\`</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (p) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Exit code: \${</span><span style="color:#24292E;">p</span><span style="color:#032F62;">.</span><span style="color:#24292E;">exitCode</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Error: \${</span><span style="color:#24292E;">p</span><span style="color:#032F62;">.</span><span style="color:#24292E;">stderr</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="processpromise" tabindex="-1"><code>ProcessPromise</code> <a class="header-anchor" href="#processpromise" aria-label="Permalink to &quot;\`ProcessPromise\`&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProcessPromise</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ProcessOutput</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">stdin</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Writable</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">stdout</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Readable</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">stderr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Readable</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">exitCode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">dest</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProcessPromise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">kill</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">void</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">nothrow</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">quiet</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProcessPromise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ProcessOutput</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">stdin</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Writable</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">stdout</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readable</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">stderr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Readable</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">exitCode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dest</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProcessPromise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">kill</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">void</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">nothrow</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">quiet</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Read more about the <a href="./process-promise">ProcessPromise</a>.</p><h3 id="processoutput" tabindex="-1"><code>ProcessOutput</code> <a class="header-anchor" href="#processoutput" aria-label="Permalink to &quot;\`ProcessOutput\`&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProcessOutput</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">stdout</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">stderr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">signal</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">readonly</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">exitCode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Combined stdout &amp; stderr.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProcessOutput</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">stdout</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">stderr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">signal</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">readonly</span><span style="color:#24292E;"> </span><span style="color:#E36209;">exitCode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Combined stdout &amp; stderr.</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The output of the process is captured as-is. Usually, programs print a new line <code>\\n</code> at the end. If <code>ProcessOutput</code> is used as an argument to some other <code>$</code> process, <strong>zx</strong> will use stdout and trim the new line.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> date </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`date\`</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`echo Current date is \${</span><span style="color:#E1E4E8;">date</span><span style="color:#9ECBFF;">}.\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`date\`</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`echo Current date is \${</span><span style="color:#24292E;">date</span><span style="color:#032F62;">}.\`</span></span></code></pre></div><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="cd" tabindex="-1"><code>cd()</code> <a class="header-anchor" href="#cd" aria-label="Permalink to &quot;\`cd()\`&quot;">​</a></h3><p>Changes the current working directory.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cd</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/tmp&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`pwd\`</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// =&gt; /tmp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/tmp&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`pwd\`</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// =&gt; /tmp</span></span></code></pre></div><p>Like <code>echo</code>, in addition to <code>string</code> arguments, <code>cd</code> accepts and trims trailing newlines from <code>ProcessOutput</code> enabling common idioms like:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cd</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`mktemp -d\`</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cd</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`mktemp -d\`</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="fetch" tabindex="-1"><code>fetch()</code> <a class="header-anchor" href="#fetch" aria-label="Permalink to &quot;\`fetch()\`&quot;">​</a></h3><p>A wrapper around the <a href="https://www.npmjs.com/package/node-fetch" target="_blank" rel="noreferrer">node-fetch</a> package.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> resp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;https://medv.io&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> resp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;https://medv.io&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="question" tabindex="-1"><code>question()</code> <a class="header-anchor" href="#question" aria-label="Permalink to &quot;\`question()\`&quot;">​</a></h3><p>A wrapper around the <a href="https://nodejs.org/api/readline.html" target="_blank" rel="noreferrer">readline</a> package.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bear </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">question</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;What kind of bear is best? &#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> bear </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">question</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;What kind of bear is best? &#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="sleep" tabindex="-1"><code>sleep()</code> <a class="header-anchor" href="#sleep" aria-label="Permalink to &quot;\`sleep()\`&quot;">​</a></h3><p>A wrapper around the <code>setTimeout</code> function.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="echo" tabindex="-1"><code>echo()</code> <a class="header-anchor" href="#echo" aria-label="Permalink to &quot;\`echo()\`&quot;">​</a></h3><p>A <code>console.log()</code> alternative which can take <a href="#processoutput">ProcessOutput</a>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> branch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`git branch --show-current\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">echo</span><span style="color:#9ECBFF;">\`Current branch is \${</span><span style="color:#E1E4E8;">branch</span><span style="color:#9ECBFF;">}.\`</span></span>
<span class="line"><span style="color:#6A737D;">// or</span></span>
<span class="line"><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Current branch is&#39;</span><span style="color:#E1E4E8;">, branch)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> branch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`git branch --show-current\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">echo</span><span style="color:#032F62;">\`Current branch is \${</span><span style="color:#24292E;">branch</span><span style="color:#032F62;">}.\`</span></span>
<span class="line"><span style="color:#6A737D;">// or</span></span>
<span class="line"><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Current branch is&#39;</span><span style="color:#24292E;">, branch)</span></span></code></pre></div><h3 id="stdin" tabindex="-1"><code>stdin()</code> <a class="header-anchor" href="#stdin" aria-label="Permalink to &quot;\`stdin()\`&quot;">​</a></h3><p>Returns the stdin as a string.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stdin</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stdin</span><span style="color:#24292E;">())</span></span></code></pre></div><h3 id="within" tabindex="-1"><code>within()</code> <a class="header-anchor" href="#within" aria-label="Permalink to &quot;\`within()\`&quot;">​</a></h3><p>Creates a new async context.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`pwd\`</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// =&gt; /home/path</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">within</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">cd</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/tmp&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`pwd\`</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// =&gt; /tmp</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`pwd\`</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// =&gt; /home/path</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`pwd\`</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// =&gt; /home/path</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">within</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">cd</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/tmp&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`pwd\`</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// =&gt; /tmp</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`pwd\`</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// =&gt; /home/path</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`node --version\`</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// =&gt; v20.2.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">within</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  $.prefix </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;export NVM_DIR=$HOME/.nvm; source $NVM_DIR/nvm.sh; nvm use 16;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`node --version\`</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">(version) </span><span style="color:#6A737D;">// =&gt; v16.20.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`node --version\`</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// =&gt; v20.2.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">within</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  $.prefix </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;export NVM_DIR=$HOME/.nvm; source $NVM_DIR/nvm.sh; nvm use 16;&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`node --version\`</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">(version) </span><span style="color:#6A737D;">// =&gt; v16.20.0</span></span></code></pre></div><h3 id="retry" tabindex="-1"><code>retry()</code> <a class="header-anchor" href="#retry" aria-label="Permalink to &quot;\`retry()\`&quot;">​</a></h3><p>Retries a callback for a few times. Will return after the first successful attempt, or will throw after specifies attempts count.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">retry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`curl https://medv.io\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// With a specified delay between attempts.</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">retry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;1s&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`curl https://medv.io\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// With an exponential backoff.</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">retry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">expBackoff</span><span style="color:#E1E4E8;">(), () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`curl https://medv.io\`</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">retry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`curl https://medv.io\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// With a specified delay between attempts.</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">retry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;1s&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`curl https://medv.io\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// With an exponential backoff.</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">retry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">expBackoff</span><span style="color:#24292E;">(), () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`curl https://medv.io\`</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="spinner" tabindex="-1"><code>spinner()</code> <a class="header-anchor" href="#spinner" aria-label="Permalink to &quot;\`spinner()\`&quot;">​</a></h3><p>Starts a simple CLI spinner.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">spinner</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`long-running command\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// With a message.</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">spinner</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;working...&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`sleep 99\`</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">spinner</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`long-running command\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// With a message.</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">spinner</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;working...&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`sleep 99\`</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="packages" tabindex="-1">Packages <a class="header-anchor" href="#packages" aria-label="Permalink to &quot;Packages&quot;">​</a></h2><p>The following packages are available without importing inside scripts.</p><h3 id="chalk-package" tabindex="-1"><code>chalk</code> package <a class="header-anchor" href="#chalk-package" aria-label="Permalink to &quot;\`chalk\` package&quot;">​</a></h3><p>The <a href="https://www.npmjs.com/package/chalk" target="_blank" rel="noreferrer">chalk</a> package.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(chalk.</span><span style="color:#B392F0;">blue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello world!&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(chalk.</span><span style="color:#6F42C1;">blue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello world!&#39;</span><span style="color:#24292E;">))</span></span></code></pre></div><h3 id="fs-package" tabindex="-1"><code>fs</code> package <a class="header-anchor" href="#fs-package" aria-label="Permalink to &quot;\`fs\` package&quot;">​</a></h3><p>The <a href="https://www.npmjs.com/package/fs-extra" target="_blank" rel="noreferrer">fs-extra</a> package.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> {version} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readJson</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./package.json&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {version} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readJson</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./package.json&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="os-package" tabindex="-1"><code>os</code> package <a class="header-anchor" href="#os-package" aria-label="Permalink to &quot;\`os\` package&quot;">​</a></h3><p>The <a href="https://nodejs.org/api/os.html" target="_blank" rel="noreferrer">os</a> package.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`cd \${</span><span style="color:#E1E4E8;">os</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">homedir</span><span style="color:#9ECBFF;">()</span><span style="color:#9ECBFF;">} &amp;&amp; mkdir example\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`cd \${</span><span style="color:#24292E;">os</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">homedir</span><span style="color:#032F62;">()</span><span style="color:#032F62;">} &amp;&amp; mkdir example\`</span></span></code></pre></div><h3 id="path-package" tabindex="-1"><code>path</code> package <a class="header-anchor" href="#path-package" aria-label="Permalink to &quot;\`path\` package&quot;">​</a></h3><p>The <a href="https://nodejs.org/api/path.html" target="_blank" rel="noreferrer">path</a> package.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`mkdir \${</span><span style="color:#E1E4E8;">path</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">join</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">basedir</span><span style="color:#9ECBFF;">, </span><span style="color:#9ECBFF;">&#39;output&#39;</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`mkdir \${</span><span style="color:#24292E;">path</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">join</span><span style="color:#032F62;">(</span><span style="color:#24292E;">basedir</span><span style="color:#032F62;">, </span><span style="color:#032F62;">&#39;output&#39;</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span></span></code></pre></div><h3 id="globby-package" tabindex="-1"><code>globby</code> package <a class="header-anchor" href="#globby-package" aria-label="Permalink to &quot;\`globby\` package&quot;">​</a></h3><p>The <a href="https://github.com/sindresorhus/globby" target="_blank" rel="noreferrer">globby</a> package.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> packages </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">glob</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;package.json&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;packages/*/package.json&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> packages </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">glob</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;package.json&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;packages/*/package.json&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><h3 id="yaml-package" tabindex="-1"><code>yaml</code> package <a class="header-anchor" href="#yaml-package" aria-label="Permalink to &quot;\`yaml\` package&quot;">​</a></h3><p>The <a href="https://www.npmjs.com/package/yaml" target="_blank" rel="noreferrer">yaml</a> package.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">YAML</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo: bar&#39;</span><span style="color:#E1E4E8;">).foo)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">YAML</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo: bar&#39;</span><span style="color:#24292E;">).foo)</span></span></code></pre></div><h3 id="minimist-package" tabindex="-1"><code>minimist</code> package <a class="header-anchor" href="#minimist-package" aria-label="Permalink to &quot;\`minimist\` package&quot;">​</a></h3><p>The <a href="https://www.npmjs.com/package/minimist" target="_blank" rel="noreferrer">minimist</a> package.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> myCustomArgv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">minimist</span><span style="color:#E1E4E8;">(process.argv.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), { boolean: [</span><span style="color:#9ECBFF;">&quot;force&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;help&quot;</span><span style="color:#E1E4E8;">] })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myCustomArgv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minimist</span><span style="color:#24292E;">(process.argv.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), { boolean: [</span><span style="color:#032F62;">&quot;force&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;help&quot;</span><span style="color:#24292E;">] })</span></span></code></pre></div><p>A minimist-parsed version of the process args as <code>argv</code> (parsed without any config).</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (argv.someFlag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;yes&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (argv.someFlag) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;yes&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="which-package" tabindex="-1"><code>which</code> package <a class="header-anchor" href="#which-package" aria-label="Permalink to &quot;\`which\` package&quot;">​</a></h3><p>The <a href="https://github.com/npm/node-which" target="_blank" rel="noreferrer">which</a> package.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">which</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;node&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">which</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;node&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><h3 id="shell" tabindex="-1"><code>$.shell</code> <a class="header-anchor" href="#shell" aria-label="Permalink to &quot;\`$.shell\`&quot;">​</a></h3><p>Specifies what shell is used. Default is <code>which bash</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$.shell </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/usr/bin/bash&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$.shell </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/usr/bin/bash&#39;</span></span></code></pre></div><p>Or use a CLI argument: <code>--shell=/bin/bash</code></p><h3 id="spawn" tabindex="-1"><code>$.spawn</code> <a class="header-anchor" href="#spawn" aria-label="Permalink to &quot;\`$.spawn\`&quot;">​</a></h3><p>Specifies a <code>spawn</code> api. Defaults to <code>require(&#39;child_process&#39;).spawn</code>.</p><h3 id="prefix" tabindex="-1"><code>$.prefix</code> <a class="header-anchor" href="#prefix" aria-label="Permalink to &quot;\`$.prefix\`&quot;">​</a></h3><p>Specifies the command that will be prefixed to all commands run.</p><p>Default is <code>set -euo pipefail;</code>.</p><p>Or use a CLI argument: <code>--prefix=&#39;set -e;&#39;</code></p><h3 id="quote" tabindex="-1"><code>$.quote</code> <a class="header-anchor" href="#quote" aria-label="Permalink to &quot;\`$.quote\`&quot;">​</a></h3><p>Specifies a function for escaping special characters during command substitution.</p><h3 id="verbose" tabindex="-1"><code>$.verbose</code> <a class="header-anchor" href="#verbose" aria-label="Permalink to &quot;\`$.verbose\`&quot;">​</a></h3><p>Specifies verbosity. Default is <code>true</code>.</p><p>In verbose mode, <code>zx</code> prints all executed commands alongside with their outputs.</p><p>Or use the CLI argument <code>--quiet</code> to set <code>$.verbose = false</code>.</p><h3 id="env" tabindex="-1"><code>$.env</code> <a class="header-anchor" href="#env" aria-label="Permalink to &quot;\`$.env\`&quot;">​</a></h3><p>Specifies an environment variables map.</p><p>Defaults to <code>p<wbr>rocess.env</code>.</p><h3 id="cwd" tabindex="-1"><code>$.cwd</code> <a class="header-anchor" href="#cwd" aria-label="Permalink to &quot;\`$.cwd\`&quot;">​</a></h3><p>Specifies a current working directory of all processes created with the <code>$</code>.</p><p>The <a href="#cd">cd()</a> func changes only <code>process.cwd()</code> and if no <code>$.cwd</code> specified, all <code>$</code> processes use <code>process.cwd()</code> by default (same as <code>spawn</code> behavior).</p><h3 id="log" tabindex="-1"><code>$.log</code> <a class="header-anchor" href="#log" aria-label="Permalink to &quot;\`$.log\`&quot;">​</a></h3><p>Specifies a <a href="src/core.ts">logging function</a>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { LogEntry, log } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;zx/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">entry</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LogEntry</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (entry.kind) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cmd&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// for example, apply custom data masker for cmd printing</span></span>
<span class="line"><span style="color:#E1E4E8;">      process.stderr.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">masker</span><span style="color:#E1E4E8;">(entry.cmd))</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(entry)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { LogEntry, log } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;zx/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">entry</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LogEntry</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (entry.kind) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cmd&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// for example, apply custom data masker for cmd printing</span></span>
<span class="line"><span style="color:#24292E;">      process.stderr.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">masker</span><span style="color:#24292E;">(entry.cmd))</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(entry)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="polyfills" tabindex="-1">Polyfills <a class="header-anchor" href="#polyfills" aria-label="Permalink to &quot;Polyfills&quot;">​</a></h2><h3 id="filename-dirname" tabindex="-1"><code>__filename</code> &amp; <code>__dirname</code> <a class="header-anchor" href="#filename-dirname" aria-label="Permalink to &quot;\`__filename\` &amp; \`__dirname\`&quot;">​</a></h3><p>In <a href="https://nodejs.org/api/esm.html" target="_blank" rel="noreferrer">ESM</a> modules, Node.js does not provide <code>__filename</code> and <code>__dirname</code> globals. As such globals are really handy in scripts, <code>zx</code> provides these for use in <code>.mjs</code> files (when using the <code>zx</code> executable).</p><h3 id="require" tabindex="-1"><code>require()</code> <a class="header-anchor" href="#require" aria-label="Permalink to &quot;\`require()\`&quot;">​</a></h3><p>In <a href="https://nodejs.org/api/modules.html#modules_module_createrequire_filename" target="_blank" rel="noreferrer">ESM</a> modules, the <code>require()</code> function is not defined. The <code>zx</code> provides <code>require()</code> function, so it can be used with imports in <code>.mjs</code> files (when using <code>zx</code> executable).</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> {version} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./package.json&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {version} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./package.json&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h2><h3 id="passing-env-variables" tabindex="-1">Passing env variables <a class="header-anchor" href="#passing-env-variables" aria-label="Permalink to &quot;Passing env variables&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">p<wbr>rocess.env.</span><span style="color:#79B8FF;">FOO</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bar&#39;</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`echo $FOO\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">p<wbr>rocess.env.</span><span style="color:#005CC5;">FOO</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bar&#39;</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`echo $FOO\`</span></span></code></pre></div><h3 id="passing-array-of-values" tabindex="-1">Passing array of values <a class="header-anchor" href="#passing-array-of-values" aria-label="Permalink to &quot;Passing array of values&quot;">​</a></h3><p>When passing an array of values as an argument to <code>$</code>, items of the array will be escaped individually and concatenated via space.</p><p>Example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> files </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`tar cz \${</span><span style="color:#E1E4E8;">files</span><span style="color:#9ECBFF;">}\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> files </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`tar cz \${</span><span style="color:#24292E;">files</span><span style="color:#032F62;">}\`</span></span></code></pre></div><h3 id="importing-into-other-scripts" tabindex="-1">Importing into other scripts <a class="header-anchor" href="#importing-into-other-scripts" aria-label="Permalink to &quot;Importing into other scripts&quot;">​</a></h3><p>It is possible to make use of <code>$</code> and other functions via explicit imports:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { $ } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;zx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`date\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { $ } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;zx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`date\`</span></span></code></pre></div><h3 id="scripts-without-extensions" tabindex="-1">Scripts without extensions <a class="header-anchor" href="#scripts-without-extensions" aria-label="Permalink to &quot;Scripts without extensions&quot;">​</a></h3><p>If script does not have a file extension (like <code>.git/hooks/pre-commit</code>), zx assumes that it is an <a href="https://nodejs.org/api/modules.html#modules_module_createrequire_filename" target="_blank" rel="noreferrer">ESM</a> module.</p><h3 id="markdown-scripts" tabindex="-1">Markdown scripts <a class="header-anchor" href="#markdown-scripts" aria-label="Permalink to &quot;Markdown scripts&quot;">​</a></h3><p>The <code>zx</code> can execute <a href="./markdown-scripts">scripts written as markdown</a>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">zx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docs/markdown.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">zx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docs/markdown.md</span></span></code></pre></div><h3 id="typescript-scripts" tabindex="-1">TypeScript scripts <a class="header-anchor" href="#typescript-scripts" aria-label="Permalink to &quot;TypeScript scripts&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { $ } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;zx&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// Or</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;zx/globals&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`ls -la\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { $ } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;zx&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// Or</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;zx/globals&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`ls -la\`</span></span>
<span class="line"><span style="color:#24292E;">}()</span></span></code></pre></div><p>Set <a href="https://nodejs.org/api/packages.html#packages_type" target="_blank" rel="noreferrer"><code>&quot;type&quot;: &quot;module&quot;</code></a> in <strong>package.json</strong> and <a href="https://www.typescriptlang.org/tsconfig/#module" target="_blank" rel="noreferrer"><code>&quot;module&quot;: &quot;ESNext&quot;</code></a> in <strong>tsconfig.json</strong>.</p><h3 id="executing-remote-scripts" tabindex="-1">Executing remote scripts <a class="header-anchor" href="#executing-remote-scripts" aria-label="Permalink to &quot;Executing remote scripts&quot;">​</a></h3><p>If the argument to the <code>zx</code> executable starts with <code>https://</code>, the file will be downloaded and executed.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">zx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://medv.io/game-of-life.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">zx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://medv.io/game-of-life.js</span></span></code></pre></div><h3 id="executing-scripts-from-stdin" tabindex="-1">Executing scripts from stdin <a class="header-anchor" href="#executing-scripts-from-stdin" aria-label="Permalink to &quot;Executing scripts from stdin&quot;">​</a></h3><p>The <code>zx</code> supports executing scripts from stdin.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zx </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;EOF&#39;</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`pwd\`</span></span>
<span class="line"><span style="color:#79B8FF;">EOF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zx </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;EOF&#39;</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`pwd\`</span></span>
<span class="line"><span style="color:#005CC5;">EOF</span></span></code></pre></div><h3 id="executing-scripts-via-eval" tabindex="-1">Executing scripts via --eval <a class="header-anchor" href="#executing-scripts-via-eval" aria-label="Permalink to &quot;Executing scripts via --eval&quot;">​</a></h3><p>Evaluate the following argument as a script.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">package.json</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">zx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--eval</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;let v = JSON.parse(await stdin()).version; echo(v)&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">package.json</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">zx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--eval</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;let v = JSON.parse(await stdin()).version; echo(v)&#39;</span></span></code></pre></div><h3 id="installing-dependencies-via-install" tabindex="-1">Installing dependencies via --install <a class="header-anchor" href="#installing-dependencies-via-install" aria-label="Permalink to &quot;Installing dependencies via --install&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// script.mjs:</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sh </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;tinysh&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">sh.</span><span style="color:#B392F0;">say</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// script.mjs:</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sh </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;tinysh&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sh.</span><span style="color:#6F42C1;">say</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, world!&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>Add <code>--install</code> flag to the <code>zx</code> command to install missing dependencies automatically.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">zx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">script.mjs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">zx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">script.mjs</span></span></code></pre></div><p>You can also specify needed version by adding comment with <code>@</code> after the import.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sh </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;tinysh&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// @^1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sh </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;tinysh&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// @^1</span></span></code></pre></div><h3 id="executing-commands-on-remote-hosts" tabindex="-1">Executing commands on remote hosts <a class="header-anchor" href="#executing-commands-on-remote-hosts" aria-label="Permalink to &quot;Executing commands on remote hosts&quot;">​</a></h3><p>The <code>zx</code> uses <a href="https://github.com/webpod/webpod" target="_blank" rel="noreferrer">webpod</a> to execute commands on remote hosts.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ssh } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;zx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ssh</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;user@host&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">\`echo Hello, world!\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ssh } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;zx&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ssh</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;user@host&#39;</span><span style="color:#24292E;">)</span><span style="color:#032F62;">\`echo Hello, world!\`</span></span></code></pre></div><h3 id="attaching-a-profile" tabindex="-1">Attaching a profile <a class="header-anchor" href="#attaching-a-profile" aria-label="Permalink to &quot;Attaching a profile&quot;">​</a></h3><p>By default <code>child_process</code> does not include aliases and bash functions. But you are still able to do it by hand. Just attach necessary directives to the <code>$.prefix</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$.prefix </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;export NVM_DIR=$HOME/.nvm; source $NVM_DIR/nvm.sh; &#39;</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#9ECBFF;">\`nvm -v\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$.prefix </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;export NVM_DIR=$HOME/.nvm; source $NVM_DIR/nvm.sh; &#39;</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#032F62;">\`nvm -v\`</span></span></code></pre></div><h3 id="using-github-actions" tabindex="-1">Using GitHub Actions <a class="header-anchor" href="#using-github-actions" aria-label="Permalink to &quot;Using GitHub Actions&quot;">​</a></h3><p>The default GitHub Action runner comes with <code>npx</code> installed.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">jobs</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">runs-on</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">steps</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">uses</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">actions/checkout@v3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Build</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">env</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">FORCE_COLOR</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">run</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#9ECBFF;">          npx zx &lt;&lt;&#39;EOF&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">          await $\`...\`</span></span>
<span class="line"><span style="color:#9ECBFF;">          EOF</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">jobs</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">build</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">runs-on</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ubuntu-latest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">steps</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">uses</span><span style="color:#24292E;">: </span><span style="color:#032F62;">actions/checkout@v3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Build</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">env</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">FORCE_COLOR</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">run</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#032F62;">          npx zx &lt;&lt;&#39;EOF&#39;</span></span>
<span class="line"><span style="color:#032F62;">          await $\`...\`</span></span>
<span class="line"><span style="color:#032F62;">          EOF</span></span></code></pre></div><h3 id="canary-beta-rc-builds" tabindex="-1">Canary / Beta / RC builds <a class="header-anchor" href="#canary-beta-rc-builds" aria-label="Permalink to &quot;Canary / Beta / RC builds&quot;">​</a></h3><p>Impatient early adopters can try the experimental zx versions. But keep in mind: these builds are ⚠️️__beta__ in every sense.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zx@dev</span></span>
<span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">zx@dev</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--quiet</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;import _ from &quot;lodash&quot; /* 4.17.15 */; console.log(_.VERSION)&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zx@dev</span></span>
<span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">zx@dev</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--quiet</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;import _ from &quot;lodash&quot; /* 4.17.15 */; console.log(_.VERSION)&#39;</span></span></code></pre></div><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h2><p><a href="https://github.com/google/zx/blob/main/LICENSE" target="_blank" rel="noreferrer">Apache-2.0</a></p><p>Disclaimer: <em>This is not an officially supported Google product.</em></p>`,171),e=[o];function t(c,r,i,y,E,d){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{F as __pageData,g as default};
